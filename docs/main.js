(()=>{"use strict";function e(e){return fetch(e).then((e=>e.text()))}function t(e,t,n){const r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS))throw new Error(e.getShaderInfoLog(r));return r}function n(e,t,n){e.bindBuffer(e.ARRAY_BUFFER,e.createBuffer()),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),e.enableVertexAttribArray(n),e.vertexAttribPointer(n,3,e.FLOAT,!1,0,0)}const r={demo01:function(){return r=this,a=void 0,c=function*(){const r=document.body.appendChild(document.createElement("canvas"));r.width=500,r.height=500;const a=r.getContext("webgl2");a.clearColor(0,0,0,1);const o=a.createProgram();a.attachShader(o,t(a,a.VERTEX_SHADER,yield e("./glsl/demo01/vert.glsl"))),a.attachShader(o,t(a,a.FRAGMENT_SHADER,yield e("./glsl/demo01/frag.glsl"))),a.linkProgram(o),a.useProgram(o),n(a,[0,1,0,1,-1,0,-1,-1,0],a.getAttribLocation(o,"position")),n(a,[1,0,0,0,1,0,0,0,1],a.getAttribLocation(o,"color")),a.uniformMatrix4fv(a.getUniformLocation(o,"transform"),!1,[.5,0,0,0,0,.5,0,0,0,0,.5,0,0,0,0,1]),a.useProgram(o),a.clear(a.COLOR_BUFFER_BIT),a.drawArrays(a.TRIANGLES,0,3)},new((o=void 0)||(o=Promise))((function(e,t){function n(e){try{E(c.next(e))}catch(e){t(e)}}function i(e){try{E(c.throw(e))}catch(e){t(e)}}function E(t){var r;t.done?e(t.value):(r=t.value,r instanceof o?r:new o((function(e){e(r)}))).then(n,i)}E((c=c.apply(r,a||[])).next())}));var r,a,o,c},demo02:function(){return n=this,r=void 0,o=function*(){const n=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),r=n.createProgram();n.attachShader(r,t(n,n.VERTEX_SHADER,yield e("./glsl/demo02/vert.glsl"))),n.attachShader(r,t(n,n.FRAGMENT_SHADER,yield e("./glsl/demo02/frag.glsl"))),n.transformFeedbackVaryings(r,["result"],n.SEPARATE_ATTRIBS),n.linkProgram(r),n.useProgram(r),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,n.createTransformFeedback());const a=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,a),n.bufferData(n.ARRAY_BUFFER,4*Float32Array.BYTES_PER_ELEMENT,n.DYNAMIC_COPY),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,0,a),n.enable(n.RASTERIZER_DISCARD),n.beginTransformFeedback(n.POINTS),n.drawArrays(n.POINTS,0,1),n.endTransformFeedback(),n.disable(n.RASTERIZER_DISCARD);const o=new Float32Array(4);n.getBufferSubData(n.TRANSFORM_FEEDBACK_BUFFER,0,o),console.log(o)},new((a=void 0)||(a=Promise))((function(e,t){function c(e){try{E(o.next(e))}catch(e){t(e)}}function i(e){try{E(o.throw(e))}catch(e){t(e)}}function E(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(c,i)}E((o=o.apply(n,r||[])).next())}));var n,r,a,o},demo03:function(){return n=this,r=void 0,o=function*(){const n=document.body.appendChild(document.createElement("canvas"));n.width=500,n.height=500;const r=n.getContext("webgl2");r.clearColor(0,0,0,1);const a=r.createProgram();r.attachShader(a,t(r,r.VERTEX_SHADER,yield e("./glsl/demo03/vert.glsl"))),r.attachShader(a,t(r,r.FRAGMENT_SHADER,yield e("./glsl/demo03/frag.glsl"))),r.transformFeedbackVaryings(a,["vPosition","vVelocity"],r.INTERLEAVED_ATTRIBS),r.linkProgram(a),r.useProgram(a);const o=5e4,c=[];for(let e=0;e<o;e++)c.push(2*(Math.random()-.5)),c.push(2*(Math.random()-.5)),c.push(0),c.push(0);const i=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,i),r.bufferData(r.ARRAY_BUFFER,new Float32Array(c),r.STREAM_COPY);const E=r.getAttribLocation(a,"position");r.enableVertexAttribArray(E),r.vertexAttribPointer(E,2,r.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,0);const f=r.getAttribLocation(a,"velocity");r.enableVertexAttribArray(f),r.vertexAttribPointer(f,2,r.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,r.createTransformFeedback());const R=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,R),r.bufferData(r.ARRAY_BUFFER,Float32Array.BYTES_PER_ELEMENT*o*4,r.STREAM_COPY),r.bindBuffer(r.ARRAY_BUFFER,null),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,R),n.addEventListener("mousemove",(e=>{const t=2*(e.offsetX/n.width-.5),o=2*(e.offsetY/n.height-.5);r.uniform2f(r.getUniformLocation(a,"mouse"),t,-o)}),!1);const d=[i,R],A=()=>{r.beginTransformFeedback(r.POINTS),r.clear(r.COLOR_BUFFER_BIT),r.drawArrays(r.POINTS,0,o),r.endTransformFeedback(),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,d[0]),r.bindBuffer(r.ARRAY_BUFFER,d[1]),r.vertexAttribPointer(E,2,r.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,0),r.vertexAttribPointer(f,2,r.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),d.reverse(),requestAnimationFrame(A)};A()},new((a=void 0)||(a=Promise))((function(e,t){function c(e){try{E(o.next(e))}catch(e){t(e)}}function i(e){try{E(o.throw(e))}catch(e){t(e)}}function E(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(c,i)}E((o=o.apply(n,r||[])).next())}));var n,r,a,o},demo04:function(){return n=this,r=void 0,o=function*(){const n=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),r=n.createProgram();n.attachShader(r,t(n,n.VERTEX_SHADER,yield e("./glsl/demo04/vert.glsl"))),n.attachShader(r,t(n,n.FRAGMENT_SHADER,yield e("./glsl/demo04/frag.glsl"))),n.transformFeedbackVaryings(r,["result"],n.SEPARATE_ATTRIBS),n.linkProgram(r),n.useProgram(r),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,n.createTransformFeedback());const a=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,a),n.bufferData(n.ARRAY_BUFFER,16*Uint8Array.BYTES_PER_ELEMENT,n.DYNAMIC_COPY),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,0,a),n.enable(n.RASTERIZER_DISCARD),n.beginTransformFeedback(n.POINTS),n.drawArrays(n.POINTS,0,1),n.endTransformFeedback(),n.disable(n.RASTERIZER_DISCARD);const o=new Uint8Array(16);n.getBufferSubData(n.TRANSFORM_FEEDBACK_BUFFER,0,o);let c="";for(const e of o)c+=e.toString(16);console.log(c)},new((a=void 0)||(a=Promise))((function(e,t){function c(e){try{E(o.next(e))}catch(e){t(e)}}function i(e){try{E(o.throw(e))}catch(e){t(e)}}function E(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(c,i)}E((o=o.apply(n,r||[])).next())}));var n,r,a,o},demo05:function(){return n=this,r=void 0,o=function*(){const n=1<<24,r=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),a=r.createProgram();r.attachShader(a,t(r,r.VERTEX_SHADER,yield e("./glsl/demo05/vert.glsl"))),r.attachShader(a,t(r,r.FRAGMENT_SHADER,yield e("./glsl/demo05/frag.glsl"))),r.transformFeedbackVaryings(a,["result"],r.SEPARATE_ATTRIBS),r.linkProgram(a),r.useProgram(a);const o=r.getAttribLocation(a,"acc");r.enableVertexAttribArray(o);const c=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,c),r.bufferData(r.ARRAY_BUFFER,Uint32Array.BYTES_PER_ELEMENT*n,r.STREAM_COPY),r.vertexAttribIPointer(o,1,r.UNSIGNED_INT,0,0);const i=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,i),r.bufferData(r.ARRAY_BUFFER,Uint32Array.BYTES_PER_ELEMENT*n,r.STREAM_COPY),r.bindBuffer(r.ARRAY_BUFFER,null),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,r.createTransformFeedback()),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,i);const E=performance.now();r.enable(r.RASTERIZER_DISCARD);const f=[c,i];for(let e=0;e<256;e++)r.uniform1ui(r.getUniformLocation(a,"step"),e),r.beginTransformFeedback(r.POINTS),r.drawArrays(r.POINTS,0,n),r.endTransformFeedback(),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,f[0]),r.bindBuffer(r.ARRAY_BUFFER,f[1]),r.vertexAttribIPointer(o,1,r.UNSIGNED_INT,0,0),f.reverse();r.disable(r.RASTERIZER_DISCARD),r.finish();const R=new Uint32Array(n);r.getBufferSubData(r.TRANSFORM_FEEDBACK_BUFFER,0,R),R.forEach((e=>{0!=e&&console.log(e)}));const d=performance.now();console.log(`duration: ${Math.round(d-E)} ms`),console.log(`hash rate: ${Math.round(256*n*1e3/(d-E)/Math.pow(1024,2))} MH/s`)},new((a=void 0)||(a=Promise))((function(e,t){function c(e){try{E(o.next(e))}catch(e){t(e)}}function i(e){try{E(o.throw(e))}catch(e){t(e)}}function E(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(c,i)}E((o=o.apply(n,r||[])).next())}));var n,r,a,o}};function a(){const e=document.body.appendChild(document.createElement("ul"));for(const t in r){const n=e.appendChild(document.createElement("li")).appendChild(document.createElement("a"));n.href="./index.html?page="+t,n.textContent=t}}window.onload=()=>{return e=void 0,t=void 0,o=function*(){(r[new URL(window.location.href).searchParams.get("page")]||a)()},new((n=void 0)||(n=Promise))((function(r,a){function c(e){try{E(o.next(e))}catch(e){a(e)}}function i(e){try{E(o.throw(e))}catch(e){a(e)}}function E(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}E((o=o.apply(e,t||[])).next())}));var e,t,n,o}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,