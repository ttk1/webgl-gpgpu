(()=>{"use strict";function n(n,t,e){const o=n.createShader(t);if(n.shaderSource(o,e),n.compileShader(o),!n.getShaderParameter(o,n.COMPILE_STATUS))throw new Error(n.getShaderInfoLog(o));return o}function t(n,t,e){n.bindBuffer(n.ARRAY_BUFFER,n.createBuffer()),n.bufferData(n.ARRAY_BUFFER,new Float32Array(t),n.STATIC_DRAW),n.enableVertexAttribArray(e),n.vertexAttribPointer(e,3,n.FLOAT,!1,0,0)}const e={demo01:()=>{return e=void 0,o=void 0,i=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const o=e.getContext("webgl2");o.clearColor(0,0,0,1);const r=o.createProgram();o.attachShader(r,n(o,o.VERTEX_SHADER,"#version 300 es\n\nin vec3 position;\nin vec3 color;\n\nout vec3 vColor;\n\nuniform mat4 transform;\n\nvoid main() {\n  gl_Position = transform * vec4(position, 1.0);\n  vColor = color;\n}\n")),o.attachShader(r,n(o,o.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n\nin vec3 vColor;\n\nout vec4 fColor;\n\nvoid main() {\n  fColor = vec4(vColor, 1.0);\n}\n")),o.linkProgram(r),o.useProgram(r),t(o,[0,1,0,1,-1,0,-1,-1,0],o.getAttribLocation(r,"position")),t(o,[1,0,0,0,1,0,0,0,1],o.getAttribLocation(r,"color")),o.uniformMatrix4fv(o.getUniformLocation(r,"transform"),!1,[.5,0,0,0,0,.5,0,0,0,0,.5,0,0,0,0,1]),o.useProgram(r),o.clear(o.COLOR_BUFFER_BIT),o.drawArrays(o.TRIANGLES,0,3)},new((r=void 0)||(r=Promise))((function(n,t){function a(n){try{A(i.next(n))}catch(n){t(n)}}function u(n){try{A(i.throw(n))}catch(n){t(n)}}function A(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(n){n(e)}))).then(a,u)}A((i=i.apply(e,o||[])).next())}));var e,o,r,i},demo02:()=>{return t=void 0,e=void 0,r=function*(){const t=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),e=t.createProgram();t.attachShader(e,n(t,t.VERTEX_SHADER,"#version 300 es\n\nout vec4 result;\n\nvoid main(void) {\n  result = vec4(1.0, 2.0, 3.0, 4.0) * 2.0;\n}\n")),t.attachShader(e,n(t,t.FRAGMENT_SHADER,"#version 300 es\n\nvoid main(void) {\n}\n")),t.transformFeedbackVaryings(e,["result"],t.SEPARATE_ATTRIBS),t.linkProgram(e),t.useProgram(e),t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,t.createTransformFeedback());const o=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,4*Float32Array.BYTES_PER_ELEMENT,t.DYNAMIC_COPY),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBufferBase(t.TRANSFORM_FEEDBACK_BUFFER,0,o),t.enable(t.RASTERIZER_DISCARD),t.beginTransformFeedback(t.POINTS),t.drawArrays(t.POINTS,0,1),t.endTransformFeedback(),t.disable(t.RASTERIZER_DISCARD);const r=new Float32Array(4);t.getBufferSubData(t.TRANSFORM_FEEDBACK_BUFFER,0,r),console.log(r)},new((o=void 0)||(o=Promise))((function(n,i){function a(n){try{A(r.next(n))}catch(n){i(n)}}function u(n){try{A(r.throw(n))}catch(n){i(n)}}function A(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(n){n(e)}))).then(a,u)}A((r=r.apply(t,e||[])).next())}));var t,e,o,r},demo03:()=>{return t=void 0,e=void 0,r=function*(){const t=document.body.appendChild(document.createElement("canvas"));t.width=500,t.height=500;const e=t.getContext("webgl2");e.clearColor(0,0,0,1);const o=e.createProgram();e.attachShader(o,n(e,e.VERTEX_SHADER,"#version 300 es\n\nin vec2 position;\nin vec2 velocity;\n\nout vec2 vPosition;\nout vec2 vVelocity;\n\nuniform vec2 mouse;\n\nvoid main(void) {\n  gl_Position = vec4(position, 0.0, 1.0);\n  gl_PointSize = 2.0;\n  vPosition = position + velocity * 0.2;\n  // 重力加速\n  vVelocity = velocity + ((mouse - position) / pow(distance(mouse, position) + 1.0, 2.0)) * 0.05;\n  // 空気抵抗\n  vVelocity -= velocity * pow(length(velocity), 2.0) * 0.05;\n}\n")),e.attachShader(o,n(e,e.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n\nout vec4 fColor;\n\nvoid main(void) {\n  fColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n")),e.transformFeedbackVaryings(o,["vPosition","vVelocity"],e.INTERLEAVED_ATTRIBS),e.linkProgram(o),e.useProgram(o);const r=5e4,i=[];for(let n=0;n<r;n++)i.push(2*(Math.random()-.5)),i.push(2*(Math.random()-.5)),i.push(0),i.push(0);const a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STREAM_COPY);const u=e.getAttribLocation(o,"position");e.enableVertexAttribArray(u),e.vertexAttribPointer(u,2,e.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,0);const A=e.getAttribLocation(o,"velocity");e.enableVertexAttribArray(A),e.vertexAttribPointer(A,2,e.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,e.createTransformFeedback());const c=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,c),e.bufferData(e.ARRAY_BUFFER,Float32Array.BYTES_PER_ELEMENT*r*4,e.STREAM_COPY),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBufferBase(e.TRANSFORM_FEEDBACK_BUFFER,0,c),t.addEventListener("mousemove",(n=>{const r=2*(n.offsetX/t.width-.5),i=2*(n.offsetY/t.height-.5);e.uniform2f(e.getUniformLocation(o,"mouse"),r,-i)}),!1);const B=[a,c],F=()=>{e.beginTransformFeedback(e.POINTS),e.clear(e.COLOR_BUFFER_BIT),e.drawArrays(e.POINTS,0,r),e.endTransformFeedback(),e.bindBufferBase(e.TRANSFORM_FEEDBACK_BUFFER,0,B[0]),e.bindBuffer(e.ARRAY_BUFFER,B[1]),e.vertexAttribPointer(u,2,e.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,0),e.vertexAttribPointer(A,2,e.FLOAT,!1,4*Float32Array.BYTES_PER_ELEMENT,2*Float32Array.BYTES_PER_ELEMENT),B.reverse(),requestAnimationFrame(F)};F()},new((o=void 0)||(o=Promise))((function(n,i){function a(n){try{A(r.next(n))}catch(n){i(n)}}function u(n){try{A(r.throw(n))}catch(n){i(n)}}function A(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(n){n(e)}))).then(a,u)}A((r=r.apply(t,e||[])).next())}));var t,e,o,r},demo04:()=>{return t=void 0,e=void 0,r=function*(){const t=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),e=t.createProgram();t.attachShader(e,n(t,t.VERTEX_SHADER,"#version 300 es\n\nflat out uvec4 result;\n\nuint F(uint X, uint Y, uint Z) {\n  return X & Y | ~X  & Z;\n}\n\nuint G(uint X, uint Y, uint Z) {\n  return X & Y | X & Z | Y & Z;\n}\n\nuint H(uint X, uint Y, uint Z) {\n  return X ^ Y ^ Z;\n}\n\nuint rotate(uint a, int s) {\n  return a << s | a >> (32 - s);\n}\n\nvoid FF(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + F(b, c, d) + x, s);\n}\n\nvoid GG(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nvoid HH(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nuint A = 0x67452301u;\nuint B = 0xefcdab89u;\nuint C = 0x98badcfeu;\nuint D = 0x10325476u;\n\nvoid update(uint X[16]) {\n  uint AA = A;\n  uint BB = B;\n  uint CC = C;\n  uint DD = D;\n\n  FF(A, B, C, D, X[0], 3);\n  FF(D, A, B, C, X[1], 7);\n  FF(C, D, A, B, X[2], 11);\n  FF(B, C, D, A, X[3], 19);\n  FF(A, B, C, D, X[4], 3);\n  FF(D, A, B, C, X[5], 7);\n  FF(C, D, A, B, X[6], 11);\n  FF(B, C, D, A, X[7], 19);\n  FF(A, B, C, D, X[8], 3);\n  FF(D, A, B, C, X[9], 7);\n  FF(C, D, A, B, X[10], 11);\n  FF(B, C, D, A, X[11], 19);\n  FF(A, B, C, D, X[12], 3);\n  FF(D, A, B, C, X[13], 7);\n  FF(C, D, A, B, X[14], 11);\n  FF(B, C, D, A, X[15], 19);\n\n  GG(A, B, C, D, X[0], 3);\n  GG(D, A, B, C, X[4], 5);\n  GG(C, D, A, B, X[8], 9);\n  GG(B, C, D, A, X[12], 13);\n  GG(A, B, C, D, X[1], 3);\n  GG(D, A, B, C, X[5], 5);\n  GG(C, D, A, B, X[9], 9);\n  GG(B, C, D, A, X[13], 13);\n  GG(A, B, C, D, X[2], 3);\n  GG(D, A, B, C, X[6], 5);\n  GG(C, D, A, B, X[10], 9);\n  GG(B, C, D, A, X[14], 13);\n  GG(A, B, C, D, X[3], 3);\n  GG(D, A, B, C, X[7], 5);\n  GG(C, D, A, B, X[11], 9);\n  GG(B, C, D, A, X[15], 13);\n\n  HH(A, B, C, D, X[0], 3);\n  HH(D, A, B, C, X[8], 9);\n  HH(C, D, A, B, X[4], 11);\n  HH(B, C, D, A, X[12], 15);\n  HH(A, B, C, D, X[2], 3);\n  HH(D, A, B, C, X[10], 9);\n  HH(C, D, A, B, X[6], 11);\n  HH(B, C, D, A, X[14], 15);\n  HH(A, B, C, D, X[1], 3);\n  HH(D, A, B, C, X[9], 9);\n  HH(C, D, A, B, X[5], 11);\n  HH(B, C, D, A, X[13], 15);\n  HH(A, B, C, D, X[3], 3);\n  HH(D, A, B, C, X[11], 9);\n  HH(C, D, A, B, X[7], 11);\n  HH(B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\nvoid main(void) {\n  // 'baaa' の md4 を計算\n  update(uint[](\n    0x61616162u, 0x80u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 32u, 0u));\n  result = uvec4(A, B, C, D);\n}\n")),t.attachShader(e,n(t,t.FRAGMENT_SHADER,"#version 300 es\n\nvoid main(void) {\n}\n")),t.transformFeedbackVaryings(e,["result"],t.SEPARATE_ATTRIBS),t.linkProgram(e),t.useProgram(e),t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,t.createTransformFeedback());const o=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,16*Uint8Array.BYTES_PER_ELEMENT,t.DYNAMIC_COPY),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBufferBase(t.TRANSFORM_FEEDBACK_BUFFER,0,o),t.enable(t.RASTERIZER_DISCARD),t.beginTransformFeedback(t.POINTS),t.drawArrays(t.POINTS,0,1),t.endTransformFeedback(),t.disable(t.RASTERIZER_DISCARD);const r=new Uint8Array(16);t.getBufferSubData(t.TRANSFORM_FEEDBACK_BUFFER,0,r);let i="";for(const n of r)i+=n.toString(16);console.log(i)},new((o=void 0)||(o=Promise))((function(n,i){function a(n){try{A(r.next(n))}catch(n){i(n)}}function u(n){try{A(r.throw(n))}catch(n){i(n)}}function A(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(n){n(e)}))).then(a,u)}A((r=r.apply(t,e||[])).next())}));var t,e,o,r},demo05:()=>{return t=void 0,e=void 0,r=function*(){const t=1<<24,e=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),o=e.createProgram();e.attachShader(o,n(e,e.VERTEX_SHADER,"#version 300 es\n\nin uint acc;\n\nflat out uint result;\n\nuniform uint step;\n\nuint F(uint X, uint Y, uint Z) {\n  return X & Y | ~X  & Z;\n}\n\nuint G(uint X, uint Y, uint Z) {\n  return X & Y | X & Z | Y & Z;\n}\n\nuint H(uint X, uint Y, uint Z) {\n  return X ^ Y ^ Z;\n}\n\nuint rotate(uint a, int s) {\n  return a << s | a >> (32 - s);\n}\n\nvoid FF(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + F(b, c, d) + x, s);\n}\n\nvoid GG(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nvoid HH(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nuint A = 0x67452301u;\nuint B = 0xefcdab89u;\nuint C = 0x98badcfeu;\nuint D = 0x10325476u;\n\nvoid update(uint X[16]) {\n  uint AA = A;\n  uint BB = B;\n  uint CC = C;\n  uint DD = D;\n\n  FF(A, B, C, D, X[0], 3);\n  FF(D, A, B, C, X[1], 7);\n  FF(C, D, A, B, X[2], 11);\n  FF(B, C, D, A, X[3], 19);\n  FF(A, B, C, D, X[4], 3);\n  FF(D, A, B, C, X[5], 7);\n  FF(C, D, A, B, X[6], 11);\n  FF(B, C, D, A, X[7], 19);\n  FF(A, B, C, D, X[8], 3);\n  FF(D, A, B, C, X[9], 7);\n  FF(C, D, A, B, X[10], 11);\n  FF(B, C, D, A, X[11], 19);\n  FF(A, B, C, D, X[12], 3);\n  FF(D, A, B, C, X[13], 7);\n  FF(C, D, A, B, X[14], 11);\n  FF(B, C, D, A, X[15], 19);\n\n  GG(A, B, C, D, X[0], 3);\n  GG(D, A, B, C, X[4], 5);\n  GG(C, D, A, B, X[8], 9);\n  GG(B, C, D, A, X[12], 13);\n  GG(A, B, C, D, X[1], 3);\n  GG(D, A, B, C, X[5], 5);\n  GG(C, D, A, B, X[9], 9);\n  GG(B, C, D, A, X[13], 13);\n  GG(A, B, C, D, X[2], 3);\n  GG(D, A, B, C, X[6], 5);\n  GG(C, D, A, B, X[10], 9);\n  GG(B, C, D, A, X[14], 13);\n  GG(A, B, C, D, X[3], 3);\n  GG(D, A, B, C, X[7], 5);\n  GG(C, D, A, B, X[11], 9);\n  GG(B, C, D, A, X[15], 13);\n\n  HH(A, B, C, D, X[0], 3);\n  HH(D, A, B, C, X[8], 9);\n  HH(C, D, A, B, X[4], 11);\n  HH(B, C, D, A, X[12], 15);\n  HH(A, B, C, D, X[2], 3);\n  HH(D, A, B, C, X[10], 9);\n  HH(C, D, A, B, X[6], 11);\n  HH(B, C, D, A, X[14], 15);\n  HH(A, B, C, D, X[1], 3);\n  HH(D, A, B, C, X[9], 9);\n  HH(C, D, A, B, X[5], 11);\n  HH(B, C, D, A, X[13], 15);\n  HH(A, B, C, D, X[3], 3);\n  HH(D, A, B, C, X[11], 9);\n  HH(C, D, A, B, X[7], 11);\n  HH(B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\nvoid main(void) {\n  // ハッシュ値の先頭が 00000000 の入力を探す\n  uint word = step << 24 | uint(gl_VertexID);\n  update(uint[](\n    word, 0x80u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 32u, 0u));\n  result = (A == 0x00000000u) ? word : acc;\n}\n")),e.attachShader(o,n(e,e.FRAGMENT_SHADER,"#version 300 es\n\nvoid main(void) {\n}\n")),e.transformFeedbackVaryings(o,["result"],e.SEPARATE_ATTRIBS),e.linkProgram(o),e.useProgram(o);const r=e.getAttribLocation(o,"acc");e.enableVertexAttribArray(r);const i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,Uint32Array.BYTES_PER_ELEMENT*t,e.STREAM_COPY),e.vertexAttribIPointer(r,1,e.UNSIGNED_INT,0,0);const a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,Uint32Array.BYTES_PER_ELEMENT*t,e.STREAM_COPY),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,e.createTransformFeedback()),e.bindBufferBase(e.TRANSFORM_FEEDBACK_BUFFER,0,a);const u=performance.now();e.enable(e.RASTERIZER_DISCARD);const A=[i,a];for(let n=0;n<256;n++)e.uniform1ui(e.getUniformLocation(o,"step"),n),e.beginTransformFeedback(e.POINTS),e.drawArrays(e.POINTS,0,t),e.endTransformFeedback(),e.bindBufferBase(e.TRANSFORM_FEEDBACK_BUFFER,0,A[0]),e.bindBuffer(e.ARRAY_BUFFER,A[1]),e.vertexAttribIPointer(r,1,e.UNSIGNED_INT,0,0),A.reverse();e.disable(e.RASTERIZER_DISCARD),e.finish();const c=new Uint32Array(t);e.getBufferSubData(e.TRANSFORM_FEEDBACK_BUFFER,0,c),c.forEach((n=>{0!=n&&console.log(n)}));const B=performance.now();console.log(`duration: ${Math.round(B-u)} ms`),console.log(`hash rate: ${Math.round(256*t*1e3/(B-u)/Math.pow(1024,2))} MH/s`)},new((o=void 0)||(o=Promise))((function(n,i){function a(n){try{A(r.next(n))}catch(n){i(n)}}function u(n){try{A(r.throw(n))}catch(n){i(n)}}function A(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(n){n(e)}))).then(a,u)}A((r=r.apply(t,e||[])).next())}));var t,e,o,r},demo06:()=>{return t=void 0,e=void 0,r=function*(){const t=65536,e=document.body.appendChild(document.createElement("canvas")).getContext("webgl2"),o=e.createProgram();e.attachShader(o,n(e,e.VERTEX_SHADER,"#version 300 es\n\nflat out uint result;\n\nuint F(uint X, uint Y, uint Z) {\n  return X & Y | ~X  & Z;\n}\n\nuint G(uint X, uint Y, uint Z) {\n  return X & Y | X & Z | Y & Z;\n}\n\nuint H(uint X, uint Y, uint Z) {\n  return X ^ Y ^ Z;\n}\n\nuint rotate(uint a, int s) {\n  return a << s | a >> (32 - s);\n}\n\nvoid FF(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + F(b, c, d) + x, s);\n}\n\nvoid GG(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nvoid HH(inout uint a, uint b, uint c, uint d, uint x, int s) {\n  a = rotate(a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nuint A;\nuint B;\nuint C;\nuint D;\n\nvoid update(uint X[16]) {\n  uint AA = A;\n  uint BB = B;\n  uint CC = C;\n  uint DD = D;\n\n  FF(A, B, C, D, X[0], 3);\n  FF(D, A, B, C, X[1], 7);\n  FF(C, D, A, B, X[2], 11);\n  FF(B, C, D, A, X[3], 19);\n  FF(A, B, C, D, X[4], 3);\n  FF(D, A, B, C, X[5], 7);\n  FF(C, D, A, B, X[6], 11);\n  FF(B, C, D, A, X[7], 19);\n  FF(A, B, C, D, X[8], 3);\n  FF(D, A, B, C, X[9], 7);\n  FF(C, D, A, B, X[10], 11);\n  FF(B, C, D, A, X[11], 19);\n  FF(A, B, C, D, X[12], 3);\n  FF(D, A, B, C, X[13], 7);\n  FF(C, D, A, B, X[14], 11);\n  FF(B, C, D, A, X[15], 19);\n\n  GG(A, B, C, D, X[0], 3);\n  GG(D, A, B, C, X[4], 5);\n  GG(C, D, A, B, X[8], 9);\n  GG(B, C, D, A, X[12], 13);\n  GG(A, B, C, D, X[1], 3);\n  GG(D, A, B, C, X[5], 5);\n  GG(C, D, A, B, X[9], 9);\n  GG(B, C, D, A, X[13], 13);\n  GG(A, B, C, D, X[2], 3);\n  GG(D, A, B, C, X[6], 5);\n  GG(C, D, A, B, X[10], 9);\n  GG(B, C, D, A, X[14], 13);\n  GG(A, B, C, D, X[3], 3);\n  GG(D, A, B, C, X[7], 5);\n  GG(C, D, A, B, X[11], 9);\n  GG(B, C, D, A, X[15], 13);\n\n  HH(A, B, C, D, X[0], 3);\n  HH(D, A, B, C, X[8], 9);\n  HH(C, D, A, B, X[4], 11);\n  HH(B, C, D, A, X[12], 15);\n  HH(A, B, C, D, X[2], 3);\n  HH(D, A, B, C, X[10], 9);\n  HH(C, D, A, B, X[6], 11);\n  HH(B, C, D, A, X[14], 15);\n  HH(A, B, C, D, X[1], 3);\n  HH(D, A, B, C, X[9], 9);\n  HH(C, D, A, B, X[5], 11);\n  HH(B, C, D, A, X[13], 15);\n  HH(A, B, C, D, X[3], 3);\n  HH(D, A, B, C, X[11], 9);\n  HH(C, D, A, B, X[7], 11);\n  HH(B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\nvoid main(void) {\n  // ハッシュ値の先頭が 00000000 の入力を探す\n  for (uint i = 0u; i < 1u << 16; i++) {\n    A = 0x67452301u;\n    B = 0xefcdab89u;\n    C = 0x98badcfeu;\n    D = 0x10325476u;\n    uint word = i << 16 | uint(gl_VertexID);\n    update(uint[](\n      word, 0x80u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 32u, 0u));\n    if (A == 0x00000000u) {\n      result = word;\n    }\n  }\n}\n")),e.attachShader(o,n(e,e.FRAGMENT_SHADER,"#version 300 es\n\nvoid main(void) {\n}\n")),e.transformFeedbackVaryings(o,["result"],e.SEPARATE_ATTRIBS),e.linkProgram(o),e.useProgram(o),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,e.createTransformFeedback());const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,Uint32Array.BYTES_PER_ELEMENT*t,e.STREAM_COPY),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBufferBase(e.TRANSFORM_FEEDBACK_BUFFER,0,r);const i=performance.now();e.enable(e.RASTERIZER_DISCARD),e.beginTransformFeedback(e.POINTS),e.drawArrays(e.POINTS,0,t),e.endTransformFeedback(),e.disable(e.RASTERIZER_DISCARD),e.finish();const a=new Uint32Array(t);e.getBufferSubData(e.TRANSFORM_FEEDBACK_BUFFER,0,a),a.forEach((n=>{0!=n&&console.log(n)}));const u=performance.now();console.log(`duration: ${Math.round(u-i)} ms`),console.log(`hash rate: ${Math.round(1e3*Math.pow(2,32)/(u-i)/Math.pow(1024,3))} GH/s`)},new((o=void 0)||(o=Promise))((function(n,i){function a(n){try{A(r.next(n))}catch(n){i(n)}}function u(n){try{A(r.throw(n))}catch(n){i(n)}}function A(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(n){n(e)}))).then(a,u)}A((r=r.apply(t,e||[])).next())}));var t,e,o,r}};function o(){const n=document.body.appendChild(document.createElement("ul"));for(const t in e){const e=n.appendChild(document.createElement("li")).appendChild(document.createElement("a"));e.href="./index.html?page="+t,e.textContent=t}}window.onload=()=>{return n=void 0,t=void 0,i=function*(){(e[new URL(window.location.href).searchParams.get("page")]||o)()},new((r=void 0)||(r=Promise))((function(e,o){function a(n){try{A(i.next(n))}catch(n){o(n)}}function u(n){try{A(i.throw(n))}catch(n){o(n)}}function A(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(n){n(t)}))).then(a,u)}A((i=i.apply(n,t||[])).next())}));var n,t,r,i}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,